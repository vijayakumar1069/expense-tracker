
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  // output   = "./generated/prisma/client" // Add this line
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}


enum PaymentTransferMode {
  UPI
  NEFT
  IMPS
  RTGS

}


// Transaction type enum to distinguish between income and expense
enum TransactionType {
  INCOME
  EXPENSE
}

// Common payment method types for both income and expenses
enum PaymentMethodType {
  CASH
  BANK
  CHEQUE
  INVOICE
}

enum Role { 
  USER
  ADMIN
}

// Main transaction model that handles both income and expenses
model Transaction {
  id              String         @id @unique @default(cuid())
  type            TransactionType // To distinguish between income and expense
  name            String
  description     String?
  amount          Float
  tax             String?
  total           Float
  date            DateTime
  category        String
  
  // User relation
  user            User           @relation(fields: [userId], references: [id])
  userId          String

  // Related models
  paymentMethod   PaymentMethod?
  attachments     Attachment[]

  // Metadata
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
  @@index([type]) // Index for filtering by transaction type
}

model Attachment {
  id            String      @id @default(cuid())
  url           String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
 transactionId String        

  @@index([transactionId])
}

model PaymentMethod {
  id            String           @id @default(cuid())
  type          PaymentMethodType

  // Payment details
  receivedBy    String?         // For cash transactions
  bankName      String?         // For bank transfers
  chequeNo      String?         // For cheque payments
  chequeDate    DateTime?       // For cheque payments
  invoiceNo     String?         // For invoices
  transferMode PaymentTransferMode?
  
  // Transaction relation
  transaction   Transaction     @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String         @unique


  // Metadata
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([type])
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  role        Role          @default(USER)
  sessions    Session[]
  transactions Transaction[] // Changed from expenses to transactions
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clients     Client[]
  invoice     Invoice[]
  employees   Employee[]

}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}


model Client{
  id String @id @default(cuid())
  name String?          // Make optional with ?
  companyName String?   // Make optional with ?
  email String @unique
  phone1 String
  phone2 String?
  streetName String
  city String
  state String
  zip String
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  user User @relation(fields: [userId], references: [id])
  userId String
  invoice Invoice[]


  
}

model Invoice{
  id String @id @default(cuid())
  clientName String
  clientCompanyName String
  clientEmail String
  clientPhone1 String
  clientPhone2 String?
  clientStreetName String
  clientCity String
  clientState String
  clientZip String
  clientCountry String

  invoiceNumber String  

  client Client @relation(fields: [clientId], references: [id])
  clientId String
  user User @relation(fields: [userId], references: [id])
  userId String
  status InvoiceStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  invoiceContents InvoiceContents[]
  subtotal Float
  taxRate Float @default(0)
  taxAmount Float @default(0)
  invoiceTotal Float  

   @@index([clientId])  // Add this
  @@index([userId])    // Add this


}

model InvoiceContents{
  id String @id @default(cuid())
  description String

  total Float
  invoice Invoice @relation(fields: [invoiceId], references: [id] , onDelete: Cascade)
  invoiceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
    @@index([invoiceId])  // Add this
}

enum InvoiceStatus {
  DRAFT
  Raised
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model Employee {
  id String @id @default(cuid())
  name String
  email String @unique
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}