
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String     @id @default(cuid())

//   email     String     @unique
//   password  String
//   role       Role       @default(USER)
//   sessions  Session[]
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   expenses  Expense[]
// }

// model Session {
//   id        String   @id
//   userId    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   expiresAt DateTime
//   createdAt DateTime @default(now())

//   @@index([userId])
// }

// model Expense {
//   id              String         @id @unique @default(cuid())
//   name            String
//   description     String?
//   amount          Float
//   tax            String?
//   total          Float
//   date           DateTime
//   user           User           @relation(fields: [userId], references: [id])
//   userId         String
//   paymentMethod  PaymentMethod?  // Optional because PaymentMethod will be created after Expense
//   attachment   Attachment[]
//   category       String

//   @@index([userId])
// }
// model Attachment {
//   id        String     @id @default(cuid())
//   url       String
//   expense   Expense    @relation(fields: [expenseId], references: [id])
//   expenseId String    @unique
// }
// enum PaymentMethodType {
//   CASH
//   BANK
//   CHEQUE
// }

// enum Role { 
//   USER
//   ADMIN
// }
// model PaymentMethod {
//   id             String           @id @default(cuid())
 
//   type           PaymentMethodType
//   receivedBy     String?         // For BANK payments
//   bankName       String?         // For BANK payments
//   chequeNo       String?         // For CHEQUE payments
//   chequeDate     DateTime?       // For CHEQUE payments
//   expense        Expense         @relation(fields: [expenseId], references: [id])
//   expenseId      String          @unique
//   createdAt   DateTime        @default(now())
//   updatedAt   DateTime        @updatedAt


//   @@index([type])
// }


// Transaction type enum to distinguish between income and expense
enum TransactionType {
  INCOME
  EXPENSE
}

// Common payment method types for both income and expenses
enum PaymentMethodType {
  CASH
  BANK
  CHEQUE
  INVOICE
}

enum Role { 
  USER
  ADMIN
}

// Main transaction model that handles both income and expenses
model Transaction {
  id              String         @id @unique @default(cuid())
  type            TransactionType // To distinguish between income and expense
  name            String
  description     String?
  amount          Float
  tax             String?
  total           Float
  date            DateTime
  category        String
  
  // User relation
  user            User           @relation(fields: [userId], references: [id])
  userId          String

  // Related models
  paymentMethod   PaymentMethod?
  attachments     Attachment[]

  // Metadata
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
  @@index([type]) // Index for filtering by transaction type
}

model Attachment {
  id            String      @id @default(cuid())
  url           String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
 transactionId String        

  @@index([transactionId])
}

model PaymentMethod {
  id            String           @id @default(cuid())
  type          PaymentMethodType

  // Payment details
  receivedBy    String?         // For cash transactions
  bankName      String?         // For bank transfers
  chequeNo      String?         // For cheque payments
  chequeDate    DateTime?       // For cheque payments
  invoiceNo     String?         // For invoices
  
  // Transaction relation
  transaction   Transaction     @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String         @unique

  // Metadata
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([type])
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  role        Role          @default(USER)
  sessions    Session[]
  transactions Transaction[] // Changed from expenses to transactions
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

