generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  // output   = "./node_modules/@prisma/client"
  // output   = "./generated/prisma/client" // Add this line
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  id            String          @id @unique @default(cuid())
  type          TransactionType
  name          String
  description   String?
  amount        Float
  tax           String?
  total         Float
  date          DateTime
  category      String
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  attachments   Attachment[]
  paymentMethod PaymentMethod?
  user          User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}

model Attachment {
  id            String      @id @default(cuid())
  url           String
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
}

model PaymentMethod {
  id            String               @id @default(cuid())
  type          PaymentMethodType
  receivedBy    String?
  bankName      String?
  chequeNo      String?
  chequeDate    DateTime?
  invoiceNo     String?
  transactionId String               @unique
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  transferMode  PaymentTransferMode?
  transaction   Transaction          @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([type])
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clients      Client[]
 
  invoice      Invoice[]
  sessions     Session[]
  transactions Transaction[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Client {
  id          String    @id @default(cuid())
  name        String?
  companyName String?
  email       String    @unique
  phone1      String
  phone2      String?
  streetName  String
  city        String
  state       String
  zip         String
  country     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  invoice     Invoice[]
}

model Invoice {
  id                String            @id @default(cuid())
  clientName        String
  clientCompanyName String
  clientEmail       String
  clientPhone1      String
  clientPhone2      String?
  clientStreetName  String
  clientCity        String
  clientState       String
  clientZip         String
  clientCountry     String
  invoiceNumber     String
  clientId          String
  userId            String
  status            InvoiceStatus     @default(DRAFT)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
  subtotal          Float
  taxRate1           Float             @default(0)
  taxRate2           Float             @default(0)
  taxAmount         Float             @default(0)
  invoiceTotal      Float
  client            Client            @relation(fields: [clientId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  invoiceContents   InvoiceContents[]

  @@index([clientId])
  @@index([userId])
}

model InvoiceContents {
  id          String   @id @default(cuid())
  description String
  total       Float
  invoiceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}



enum PaymentTransferMode {
  UPI
  NEFT
  IMPS
  RTGS
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum PaymentMethodType {
  CASH
  BANK
  CHEQUE
  INVOICE
}

enum Role {
  USER
  ADMIN
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  Raised
}
